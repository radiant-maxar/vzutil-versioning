#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def golangTool = tool 'golang_1.7'
    
    def appName = ""

    stage("Setup") {
        deleteDir()
		withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${root}/gopath/bin ${root}/gopath/pkg ${root}/gopath/src/github.com/venicegeo/vzutil-versioning
              go version
            """
            appName = "vzutil-versioning"
    
        }
		dir("${root}/gopath/src/github.com/venicegeo/vzutil-versioning") {
			git url: "${env.GIT_URL}", branch: "master"
		}
    }

    stage("Build") {
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath",
          "GOBIN=${root}/gopath/bin"
        ]) {
            sh """
              cd "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/single"
              go install
              cd ../web
              go install
            """
        }
    }
    
    stage("Deploy") {
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mv "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/manifest.jenkins.yml" .
              mv "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/environment.yml" .
              mv "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/Procfile" .
              mv "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/write_settings.sh" .
              mv "\$GOPATH/src/github.com/venicegeo/vzutil-versioning/web/templates" .
              mv ${root}/gopath/bin/* .
              rm -rf gopath/
            """
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_STORAGE_CREDS}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS']]) {
        sh """
          ./write_settings.sh
          rm write_settings.sh
	  mv settings.xml settings.xml.tmp
        """
      }
         if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
	sh "ls"
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PROVISION_SPACE}"
        sh "cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PROVISION_DOMAIN} -u none --no-start"
		try {
          sh "cf set-env ${appName} SPACE ${env.PROVISION_SPACE}"
          sh "cf set-env ${appName} DOMAIN ${env.PROVISION_DOMAIN}"
          sh "cf set-env ${appName} ARTIFACT_STORAGE_URL ${env.ARTIFACT_STORAGE_URL}"
          sh "cf start ${appName}"
        } catch (Exception e) {
		  try {
			sh "cf logs --recent ${appName}"
		  } catch (Exception ex) {
			echo "Printing logs failed: ${ex}"
		  }
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
      }
    }
 withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PROVISION_SPACE}"
        def legacyAppNames = sh(script: "cf routes | grep \"vzutil-versioning \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PROVISION_DOMAIN} --hostname vzutil-versioning"
        // Remove Legacy applications
        for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
          def legacyAppName = legacyApp.toString().trim()
          if (legacyAppName != appName) {
            sh "cf unmap-route ${legacyAppName} ${env.PROVISION_DOMAIN} --hostname vzutil-versioning"
            sh "cf delete -f ${legacyAppName} -r"
          }
        }
      }
    }
        }
    }
}
